#!/bin/bash

# Note:
# This script is sourced by the mpbb wrapper script.
# Do not execute this directly!


list-subports-help() {
    echo "Print the name of port --port and its subports."
    echo "Alternatively, print the name and subports of multiple ports given as positional arguments."
}

print-subports() {
    local portname=$1
    local port
    local portgroup
    local ports
    local exclude
    local exclude_reasons
    local reason

    os_version="$(sw_vers -productVersion | cut -d . -f 1-2)"
    is_64bit_capable="$(sysctl -n hw.cpu64bit_capable)"
    ports=$("${option_prefix}/bin/port" -q info --index --line --name "${portname}" "subportof:${portname}" 2>/dev/null) || return $?
    for port in $ports; do
        exclude=0
        exclude_reasons=()

        if [[ "$port" =~ graveyard ]]; then
            exclude=1
            exclude_reasons+=("its name contains 'graveyard'")
        fi

        for portgroup in $("${option_prefix}/bin/port-tclsh" "${thisdir}/tools/portgroups.tcl" "$port"); do
            if [ "$portgroup" = "obsolete-1.0" ]; then
                exclude=1
                exclude_reasons+=("it includes the obsolete 1.0 PortGroup")
            fi
        done

        if [[ "${os_version}" = "10.6" && "${is_64bit_capable}" = "0" ]]; then
            supported_archs=$("${option_prefix}/bin/port-tclsh" "${thisdir}/tools/supported-archs.tcl" "${port}")
            if [[ -n "${supported_archs}" && !("${supported_archs}" == *"x86_64"* && "${supported_archs}" == *"i386"*) ]]; then
                exclude=1
                exclude_reasons+=("the ${os_version}_x86_64 builder will build it")
            fi
        fi

        if [ $exclude -eq 0 ]; then
            echo "$port"
        else
            if [ ${#exclude_reasons[@]} -eq 1 ]; then
                echo >&2 "Excluding '${port}' because ${exclude_reasons[0]}."
            else
                echo >&2 "Excluding '${port}' for the following reasons:"
                for reason in "${exclude_reasons[@]}"; do
                    echo >&2 " - ${reason}"
                done
            fi
        fi
    done
}

list-subports() {
    if [ $# -le 0 -a -z "${option_port}" ]; then
        errmsg "Either --port or a list of positional arguments with port names is required."
        return 1
    fi

    success=0

    if [ -n "${option_port}" ]; then
        print-subports "${option_port}" && success=1
    fi

    for p in "$@"; do
        print-subports "$p" && success=1
    done

    if [ $success -eq 0 ]; then
        errmsg "None of the specified ports were found in the port index."
        return 1
    fi
}
