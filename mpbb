#!/bin/bash
# -*- coding: utf-8; mode: sh; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=sh:et:sw=4:ts=4:sts=4

# Abort on undefined variables.
set -u

# shellcheck disable=SC2154
# Don't inherit any option variables from the calling environment.
unset "${!option_@}"

# Print $0 and arguments to standard error.
# Unset IFS to ensure "$*" uses spaces as separators.
msg() (unset IFS; printf >&2 '%s: %s\n' "$0" "$*")
err() { msg error: "$@"; }
warn() { msg warning: "$@"; }

usage() {
    cols=$(tput cols) || cols=80

    fmt -w $(( cols - 8 )) >&2 <<-EOF
Usage: $0 COMMAND [OPTION...]

mpbb, a script to help build MacPorts ports in a continous integration
environment.

OPTIONS

 --archive-site=URL
   Base URL of the packages archive to check whether an archive was not
   published yet. Default is "https://packages.macports.org".

 --help
   Print this usage message.

 --prefix=PREFIX
   The prefix of the MacPorts installation that will build the ports. Defaults
   to "/opt/local".

 --svn=BINARY
   Absolute path to the svn binary that you want to use for SVN operations. The
   default is to find svn in your path.

 --svn-url=SVNURL
   URL to a Subversion repository in a format accepted by Subversion. The
   referenced folder must contain a dports and a base folder. The default is
   "https://svn.macports.org/repository/macports/trunk".

 --svn-revision=REVISION
   Revision number in the specified Subversion repository to checkout. Defaults
   to "HEAD".

 --staging-dir=DIR
   Directory where new distributable archives should be copied for deployment
   on the archive server. Defaults to the 'archive-staging' subfolder in the
   current directory.

 --work-dir=WORKDIR
   A scratch area that mpbb will use to put temporary files, ideally kept
   between builds. Your MacPorts installation in --prefix needs to be able to
   access this location. Defaults to your current directory, or
   /tmp/mp-buildbot if \$PWD isn't set.
EOF

    printf >&2 "\nCOMMANDS\n"
    for command in "${commands[@]}"; do
        printf >&2 " %s\n" "$command"
        printf "   %s\n\n" "$("${command}-help" | tr '\n' ' ')" | fmt -w $(( cols - 8 )) >&2
    done

    exit 2
}

# TODO Documentation, obviously :)
parseopt() {
    # Be stricter about this than getopt(1) is.
    if ! [[ ${1-} =~ ^[[:alnum:]-]+:{0,2}(,[[:alnum:]-]+:{0,2})*$ ]]; then
        err 'Invalid argument given to parseopt'
        return 3
    fi

    # Use "--options +" to prevent arguments from being rearranged.
    local opts
    opts=$(getopt --name "$0" --opt + --longopt "$1" -- "${@:2}")
    case $? in
        0)
            ;;
        1)
            # getopt(1) will print the bad argument to standard error.
            echo >&2 "Try \`$0 --help' for more information."
            return 2
            ;;
        *)
            err 'getopt encountered an internal error'
            return 3
            ;;
    esac
    readonly opts

    local -a validopts
    IFS=, read -ra validopts <<<"$1"
    readonly validopts=("${validopts[@]/#/--}")

    eval set -- "$opts"

    local opt validopt
    # getopt(1) ensures that the options are always terminated with "--".
    while [[ $1 != -- ]]; do
        opt=$1
        shift
        # XXX Do NOT touch anything below unless you know exactly what
        # you're doing (http://mywiki.wooledge.org/BashFAQ/006#eval).
        for validopt in "${validopts[@]}"; do
            if [[ $validopt == "$opt:" || $validopt == "$opt::" ]]; then
                opt=${opt#--}
                # $1 is null for omitted optional arguments.
                eval option_"${opt//-/_}"'=$1'
                shift
                continue 2
            fi
            if [[ $validopt == "$opt" ]]; then
                opt=${opt#--}
                eval option_"${opt//-/_}"'=1'
                continue 2
            fi
        done
        # Unreachable unless there is a bug in this function or in getopt(1).
        err 'parseopt encountered an internal error'
        return 3
    done
    args=("${@:2}")
}

unset GETOPT_COMPATIBLE
if getopt -T >/dev/null; then
    # http://frodo.looijaard.name/project/getopt
    err "Cannot find an enhanced getopt(1)"
    exit 3
fi

# Process options.
parseopt help,prefix:,work-dir: "$@" || exit

# Use sensible defaults for options that weren't set on the command line.
: "${option_port=}"
: "${option_prefix=/opt/local}"
: "${option_work_dir=${PWD:-/tmp/mp-buildbot}}"
: "${option_help=0}"

# shellcheck disable=SC2034 disable=SC2154
# Not really options, but pretend they are because they're global.
option_log_dir=${option_work_dir}/logs

# shellcheck disable=SC2086
# Set up the positional arguments for the subcommand. With "set -u"
# enabled, "${foo[@]}" doesn't work if foo is empty.
set -- ${args+"${args[@]}"}

# Load the subcommand implementations. Each sourced script "mpbb-FOO"
# must define functions "FOO" and "FOO-help".
cmds=()
thisdir=$(cd "$(dirname "$0")" && pwd)
for cmdfile in "$thisdir/mpbb-"*; do
    # Unfortunately ShellCheck does not currently support following multiple
    # files, so we'll just disable the warning.
    # shellcheck disable=SC1090
    if . "$cmdfile"; then
        cmds+=("${cmdfile##*/mpbb-}")
    else
        err "failed to load subcommand script \`$cmdfile'"
        exit 3
    fi
done

if (( $# < 1 )); then
    err "No command specified"
    usage
fi

command=$1
shift
if [[ ! -f "$thisdir/mpbb-$command" ]]; then
    err "Unknown command \`$command'"
    usage
fi

## If subcommand help is requested, print that
if [[ $option_help -eq 1 ]]; then
    usage
fi

## Otherwise, run the command and deal with errors
PORTSRC=${option_work_dir}/macports.conf "$command" "$@"
readonly rc=$?
case $rc in
    0)
        ;;
    *)
        err "\`$command' failed to run successfully"
        ;;
esac
exit $rc
